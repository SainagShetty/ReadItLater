{
    "status": "OK",
    "usage": "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
    "url": "https://dhavalkapil.com/icmptunnel/",
    "language": "english",
    "text": "'icmptunnel' works by encapsulating your IP traffic in ICMP echo packets and sending them to your own proxy server. The proxy server decapsulates the packet and forwards the IP traffic. The incoming IP packets which are destined for the client are again encapsulated in ICMP reply packets and sent back to the client. The IP traffic is sent in the 'data' field of ICMP packets.\nRFC 792, which is IETF's rules governing ICMP packets, allows for an arbitrary data length for any type 0 (echo reply) or 8 (echo message) ICMP packets.\nSo basically the client machine uses only the ICMP protocol to communicate with the proxy server. Applications running on the client machine are oblivious to this fact and work seamlessly.\nBypassing Captive Portals: Many public Wi-Fi use Captive Portals to authenticate users, i.e. after connecting to the Wi-Fi the user is redirected to a webpage that requires a login. icmptunnel can be used to bypass such authentications in transport/application layers.\nBypassing firewalls: Firewalls are set up in various networks to block certain type of traffic. icmptunnel can be used to bypass such firewall rules. Obfuscating the data payload can also be helpful to bypass some firewalls.\nEncrypted Communication Channel: Adding sufficient encryption to the data, icmptunnel can be used to establish an encrypted communication channel between two host machines. \nA POSIX-compliant host with root access that will be communicating with only ICMP protocol. This will be the client.\nA POSIX-compliant host with root access with full access to the internet. This will act as our proxy server.\nThe proxy server should be accessible from the client host.\nNote: Although icmptunnel has been successfully tested on Ubuntu 14.04 LTS, it should work on others as well.\n on both machines.\nClone this repository using this command:\nOn the server side run the tunnel with root privileges:\nOn the client side, find out your gateway and the corresponding interface:\nEdit client.sh and replace <server> with the IP address of the proxy server. <gateway> with gateway address obtained above and similarly for <interface>.\n(Google's DNS server) which will be accessible to the proxy server. You would need to edit your DNS settings for this. You might need to manually delete the route for your local DNS server from your routing table.\nRun the tunnel on your client with root privileges:\nThe tunnel should run and your client machine should be able to access the internet. All traffic will be tunneled through ICMP.\n. icmptunnel listens on this interface for IP packets. These packets are encapsulated in an ICMP echo packet(i.e. the payload of the ICMP packet is nothing but the original IP packet). This newly generated ICMP packet is sent outside the client machine, to the proxy server, through the restricted internet connection.\nThe proxy server receives these ICMP packets and decapsulates the original IP packet. This is retransmitted onto the Internet after implementing IP masquerading. Hence, the target believes that its the proxy server making the request. The target then responds back to the proxy server with an IP packet. This is again captured by icmptunnel, encapsulated in an ICMP reply packet and send back to the client. \n. The user applications read from this virtual interface and hence get the proper IP packet.\n+--------------+                         +------------+ |              |       ICMP traffic      |            |       IP traffic |    Client    |  ------------------->   |   Proxy    |   ------------------> |              |  <-------------------   |   Server   |   <------------------ |              |    through restricted   |            |     proper internet +--------------+         internet        +------------+ \n+--------------+                                    +------------+ |              |  IP traffic  +------+  IP traffic  |            |   ICMP traffic |     User     |  --------->  | tun0 |  --------->  | icmptunnel | ---------------> | Applications |  <---------  +------+  <---------  |  program   | <--------------- |              |        (Virtual Interface)         |            |    restricted  +--------------+                                    +------------+     internet \n                 +------------+   ICMP traffic   |            |  IP traffic     +------+       NAT/Masquerading ---------------> | icmptunnel | ------------>   | tun0 |    --------------------->  <--------------- |  program   | <------------   +------+    <---------------------    restricted    |            |           (Virtual Interface)   proper internet     internet     +------------+ \nICMP is implemented using raw C sockets.\nThe checksum is calculated using the algorithm given in RFC 1071.\nTun driver is used for creating a virtual interface and binding to user space programs.\n is used to change the routing tables of the client so as to route all traffic to the virtual tunnel interface.\n is used to temporarily change the setting of IP forwarding and replying back to ICMP requests on the side of the proxy server.\n on the server side.\n. This interface provides full internet connection.\n(a WiFi hotspot). This hotspot is configured not to provide any internet connection.\n will be created in both the client and the proxy server.\nThe client will make an HTTP request to dhavalkapil.com.\nWireshark is used to capture network traffic at both ends on various interface.\n on client side\nThe usual HTTP request is visible along with response.\n on client side\nAll traffic is ICMP. The HTTP/IP packet can be seen as part of the payload of the ICMP packet.\n on proxy server side\nThe ICMP packets sent by the client can be seen.\n on proxy server side\n on proxy server side\nFeel free to file issues and submit pull requests \u2013 contributions are welcome.\nicmptunnel is licensed under the MIT license.\n"
}
